{"version":3,"sources":["Components/User.js","Components/TodoItem.js","Components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["User","props","react_default","a","createElement","href","email","username","TodoItem","style","completed","background","title","Components_User","user","toString","TodoList","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","requested","loaded","users","todos","completedData","requestData","bind","assertThisInitialized","sortList","_this2","setState","xhrTodo","XMLHttpRequest","open","addEventListener","xhrUsers","JSON","parse","response","data","forEach","item","find","one","id","userId","push","Components_TodoItem","key","send","sort","b","localeCompare","onClick","className","Component","App","src_Components_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","querySelector","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e031a36e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction User(props) {\r\n  return (\r\n    <td><a href={\"mailto:\" + props.email}> {props.username} </a></td>\r\n  );\r\n}\r\n\r\nexport default User;\r\n","import React from 'react';\r\nimport User from './User';\r\n\r\nfunction TodoItem(props) {\r\n  return (\r\n    <tr style={props.completed\r\n      ? {background:'rgba(69, 169, 21, 0.15)'}\r\n      : {background:'rgba(253, 106, 96, 0.29)'}}\r\n    >\r\n      <td>{props.title}</td>\r\n      <User username={props.user.username} email={props.user.email}/>\r\n      <td>{props.completed.toString()}</td>\r\n    </tr>\r\n  )\r\n}\r\n\r\nexport default TodoItem;\r\n","import React, {Component} from 'react';\r\nimport TodoItem from './TodoItem.js';\r\nimport './TodoList.css';\r\n\r\nclass TodoList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      requested: false,\r\n      loaded: false,\r\n      users: [],\r\n      todos: [],\r\n      completedData: []\r\n    };\r\n    this.requestData = this.requestData.bind(this);\r\n    this.sortList = this.sortList.bind(this)\r\n   // this.createData = this.createData.bind(this)\r\n  }\r\n\r\n  requestData() {\r\n    this.setState({\r\n      requested: true\r\n    });\r\n    const xhrTodo = new XMLHttpRequest();\r\n    xhrTodo.open('GET', 'https://jsonplaceholder.typicode.com/todos');\r\n    xhrTodo.addEventListener('load',() => {\r\n      const xhrUsers = new XMLHttpRequest();\r\n      xhrUsers.open('GET', 'https://jsonplaceholder.typicode.com/users');\r\n      xhrUsers.addEventListener('load',() => {\r\n        this.setState({\r\n          loaded: true,\r\n          users: JSON.parse(xhrUsers.response),\r\n          todos: JSON.parse(xhrTodo.response)\r\n        });\r\n        const data = []\r\n        this.state.todos.forEach((item) => {\r\n          const user = this.state.users.find(one => one.id === item.userId);\r\n          data.push(<TodoItem title={item.title} completed={item.completed}\r\n                              userId={item.userId} user={user} key={item.id}/>)\r\n        });\r\n        this.setState({\r\n          completedData: data\r\n        });\r\n      });\r\n      xhrUsers.send()\r\n    });\r\n    xhrTodo.send();\r\n  }\r\n\r\n  sortList() {\r\n    this.setState((state) => ({\r\n      completedData: state.completedData.sort((a, b) => {\r\n        return a.props.title.localeCompare(b.props.title)\r\n      })\r\n    }))\r\n  }\r\n\r\n  render() {\r\n    if (!this.state.requested) {\r\n      return <button onClick={this.requestData} className='request'>Show the list!</button>\r\n    } else if (this.state.loaded) {\r\n\r\n      return (\r\n        <div>\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th onClick={this.sortList} className='sort'>\r\n                  ToDoItem (click to sort)\r\n                </th>\r\n                <th>User name</th>\r\n                <th>Completed</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {this.state.completedData}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      );\r\n    } else {\r\n      return <div>Loading...</div>;\r\n    }\r\n  }\r\n}\r\n\r\nexport default TodoList;\r\n","import React from 'react';\nimport TodoList from './Components/TodoList.js';\nimport './App.css';\n\nfunction App() {\n  return (\n    <TodoList/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.querySelector('body'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}